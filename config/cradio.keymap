#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NUM_L 1
#define SYM_L 2
#define BT_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "homerow mods";
      #binding-cells = <2>;
      tapping_term_ms = <200>;
      quick-tap-ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  };

  combos {
    compatible = "zmk,combos";

    esc {
      timeout-ms = <50>;
      key-positions = <1 2>;
      layers = <0>;
      bindings = <&kp ESC>;
    };

    backspace {
      timeout-ms = <50>;
      key-positions = <11 12>;
      layers = <0>;
      bindings = <&kp BACKSPACE>;
    };

    tab {
      timeout-ms = <50>;
      key-positions = <12 13>;
      layers = <0>;
      bindings = <&kp TAB>;
    };

    less_than {
      timeout-ms = <50>;
      key-positions = <15 16>;
      layers = <0>;
      bindings = <&kp LESS_THAN>;
    };

    colon {
      timeout-ms = <50>;
      key-positions = <16 17>;
      layers = <0>;
      bindings = <&kp COLON>;
    };

    greater_than {
      timeout-ms = <50>;
      key-positions = <17 18>;
      layers = <0>;
      bindings = <&kp GREATER_THAN>;
    };

    enter {
      timeout-ms = <50>;
      key-positions = <22 23>;
      layers = <0>;
      bindings = <&kp ENTER>;
    };

    single_quote {
      timeout-ms = <50>;
      key-positions = <25 26>;
      layers = <0>;
      bindings = <&kp SINGLE_QUOTE>;
    };

    underscore {
      timeout-ms = <50>;
      key-positions = <26 27>;
      layers = <0>;
      bindings = <&kp UNDERSCORE>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp Q        &kp W  &kp E  &kp R     &kp T                &kp Y            &kp U     &kp I      &kp O    &kp P
        &hm LCTRL A  &kp S  &kp D  &kp F     &hm RALT G           &kp H            &kp J     &kp K      &kp L    &hm RCTRL SEMI
        &hm LSHFT Z  &kp X  &kp C  &kp V     &kp B                &kp N            &kp M     &kp COMMA  &kp DOT  &hm RSHFT FSLH
                                    &kp LGUI  &lt SYM_L SPACE      &lt NUM_L ENTER  &kp BKSP
      >;
    };

    num_layer {
      bindings = <
        &kp N1  &kp N2  &kp N3  &kp N4   &kp N5       &kp N6    &kp N7     &kp N8     &kp N9     &kp N0
        &kp F1  &kp F2  &kp F3  &kp F4   &kp F5       &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp C_VOL_UP
        &kp F6  &kp F7  &kp F8  &kp F9   &kp F10      &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &kp C_VOL_DN
                                &kp F11  &kp F12      &trans    &trans
      >;
    };

    sym_layer {
      bindings = <
        &kp EXCL   &kp AT     &kp LBRC  &kp RBRC   &kp PIPE      &kp LA(GRAVE)  &kp TILDE  &kp BSLH  &none     &none
        &kp HASH   &kp DLLR   &kp LPAR  &kp RPAR   &none         &kp PLUS       &kp MINUS  &kp FSLH  &kp STAR  &kp SQT
        &kp PRCNT  &kp CARET  &kp LBKT  &kp RBKT   &mo BT_L      &kp AMPS       &kp EQUAL  &none     &none     &none
                                            &trans  &trans        &kp SEMI       &trans
      >;
    };

    bt_layer {
      bindings = <
        &none        &none  &none  &none  &none      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
        &none        &none  &none  &none  &none      &bt BT_PRV    &bt BT_NXT    &none         &none         &bt BT_CLR
        &bootloader  &none  &none  &none  &none      &none         &none         &none         &none         &bootloader
                                   &none  &none      &none         &none
      >;
    };
  };
};
